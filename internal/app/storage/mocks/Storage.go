// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/KraDM09/shortener/internal/app/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteUrls provides a mock function with given fields: ctx, deleteHashes
func (_m *Storage) DeleteUrls(ctx context.Context, deleteHashes ...storage.DeleteHash) error {
	_va := make([]interface{}, len(deleteHashes))
	for _i := range deleteHashes {
		_va[_i] = deleteHashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUrls")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...storage.DeleteHash) error); ok {
		r0 = rf(ctx, deleteHashes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: hash
func (_m *Storage) Get(hash string) (*storage.URL, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *storage.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storage.URL, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) *storage.URL); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuantityUserShortUrls provides a mock function with given fields: userID, shortUrls
func (_m *Storage) GetQuantityUserShortUrls(userID string, shortUrls *[]string) (int, error) {
	ret := _m.Called(userID, shortUrls)

	if len(ret) == 0 {
		panic("no return value specified for GetQuantityUserShortUrls")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *[]string) (int, error)); ok {
		return rf(userID, shortUrls)
	}
	if rf, ok := ret.Get(0).(func(string, *[]string) int); ok {
		r0 = rf(userID, shortUrls)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, *[]string) error); ok {
		r1 = rf(userID, shortUrls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlsByUserID provides a mock function with given fields: userID
func (_m *Storage) GetUrlsByUserID(userID string) (*[]storage.URL, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUrlsByUserID")
	}

	var r0 *[]storage.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]storage.URL, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *[]storage.URL); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: hash, url, userID
func (_m *Storage) Save(hash string, url string, userID string) (string, error) {
	ret := _m.Called(hash, url, userID)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(hash, url, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(hash, url, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(hash, url, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBatch provides a mock function with given fields: batch, userID
func (_m *Storage) SaveBatch(batch []storage.URL, userID string) error {
	ret := _m.Called(batch, userID)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]storage.URL, string) error); ok {
		r0 = rf(batch, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
